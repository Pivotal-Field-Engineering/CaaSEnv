apiVersion: v1
kind: ConfigMap
metadata:
  name: dex
  namespace: tanzu-system-auth
data:
  config.yaml: |
    issuer: https://192.168.104.19:30167
    frontend:
      theme: tkg
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    expiry:
      signingKeys: "10m"
      idTokens: "5m"
    logger:
      level: "debug"
      format: "json"

    staticClients:
    - id: auth1
      redirectURIs:
      - 'https://192.168.104.24:30166/callback'
      name: 'auth1'
      # echo -n '<clientSecret>'
      secret: emhPV1hMMmdsTG02Qm1HanlTUHpsSkxZblNjMmk2NHZGMlNoTXlqdUNUTT0=

    connectors:
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.
        host: coreadc1.ragazzilab.com:3269

        # Following field is required if the LDAP host is not using TLS (port 389).
        # Because this option inherently leaks passwords to anyone on the same network
        # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
        #
        # insecureNoSSL: true

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        insecureSkipVerify: false

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        # startTLS: true

        # Path to a trusted root certificate file. Default: use the host's root CA.
        #rootCA: /etc/dex/ldap.ca

        # A raw certificate file can also be provided inline.
        rootCAData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEZnpDQ0FtZWdBd0lCQWdJUUxqWUdIY1c4SWExSnZBd3FuN3Z1RkRBTkJna3Foa2lHOXcwQkFRVUZBREJTDQpNUk13RVFZS0NaSW1pWlB5TEdRQkdSWURZMjl0TVJvd0dBWUtDWkltaVpQeUxHUUJHUllLY21GbllYcDZhV3hoDQpZakVmTUIwR0ExVUVBeE1XY21GbllYcDZhV3hoWWkxRFQxSkZRVVJETVMxRFFUQWVGdzB4TkRFeU1UZ3hPVE16DQpNemxhRncweU5ERXlNVGd4T1RRek16bGFNRkl4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEdqQVlCZ29KDQpraWFKay9Jc1pBRVpGZ3B5WVdkaGVucHBiR0ZpTVI4d0hRWURWUVFERXhaeVlXZGhlbnBwYkdGaUxVTlBVa1ZCDQpSRU14TFVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBK05HR2l4bC9hNURCDQpudjFSS01KejMyYVh2Z1liY2cwM29Fd2RBUWxNM0VOdm9HYUM2RVNGbmtpNml6Qmw1dFE5RW5VQnZpcnEyTFBaDQpSTC8xYThBaDJSZ0REMXBkTDRoM1d2MkVZLzh6cWxLMjZPeFlPYXBkeXNxV0xvalBVa2ROZnl5Qnc5VzFkQ2s3DQpZRHdvQzU1YVFWa21MODNLSU9TUVAvR0VjMEUyNUNYS2tBOHNja3RYUkJxVVNMOFZOcWI0d0g0VUVYdklnSyt4DQpOVlNSMGJOak5kY2FYQml3TFFvdjdEazcrOXpaNHBYdWRvZ05oNG1tR1BmcmdZbnNrYzdUc2NGbDF5bU5PUTgrDQpsNDEyUnFyTzcvODNtR2JwZjdMVCtyR1hYWldoWTBDdHFSZXczUGdsamhCbnVBMksvQytUOHAwNVhBL0dTRVRiDQpDcHNrZFphekZRSURBUUFCbzFFd1R6QUxCZ05WSFE4RUJBTUNBWVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkDQpCZ05WSFE0RUZnUVVZaVd1dlV0Z3Q2cnV3RllzR0cyMmRvZVRPa0l3RUFZSkt3WUJCQUdDTnhVQkJBTUNBUUF3DQpEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBSkRqVGpWUVhKSjUxVytsZWZwdXVucHpUMEVQRE0zSTErL0E5NHlsDQpGektYNEZsT05rWUNqLzd3TnRaK0I2NWEzQ2loT2YwL3EwaHFtY0hLaXU2TGR0NXRUWUwzaHZXczdsOW0xN0pnDQoxTTlJcHVPVXVFUG8wdjlxVW40NUorNDJPZjFMMS9jU3E1UTFtTTU5b04xVW1OeTlpazlEeVMveUtEVmRMR0xvDQpnTDVubjRVZWJ2WjJvZmlBRVFRZ0tDVm94M0hYc2VRNVpRSFU1MFMvN1VZb095U0l3ZEV3Y2RaaHJROGlOdk5FDQpZK1pPNWlTdjR6VkExQnV6RlNhMXBxNlJoT200WFJ0MnMwOUZaT0lwV3RNcWJpeFVpbDVkZFltV3BJR2twR0d5DQpTeUlxN2FEM3R0NnJrTkZoRmlQS2dPQzRsUm1qTmxMTkt6Sjh6Sk5BZDZ3RWNNaz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg==



        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: CN=svcacct AD. Bind,OU=Service Accounts,DC=ragazzilab,DC=com
        bindPW: VMware1!

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        usernamePrompt: LDAP Username

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: ou=User Accounts,DC=ragazzilab,DC=com
          # Optional filter to apply when searching the directory.
          # filter: "(objectClass=posixAccount)"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: userPrincipalName
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: userPrincipalName
          # Required. Attribute to map to Email.
          emailAttr: userPrincipalName #mail
          # Maps to display name of users. No default value.
          nameAttr: cn #displayName

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: DC=ragazzilab,DC=com
          # Optional filter to apply when searching the directory.
          filter: "(objectCategory=group)"

          # Following two fields are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userAttr: dn #sAMAccountName
          groupAttr: "member:1.2.840.113556.1.4.1941:"
          # nameAttr: cn

    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]
    storage:
      type: kubernetes
      config:
        inCluster: true

    enablePasswordDB: false
