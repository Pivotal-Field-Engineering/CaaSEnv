apiVersion: v1
kind: ConfigMap
metadata:
  name: dex
  namespace: tanzu-system-auth
data:
  config.yaml: |
    issuer: https://10.193.38.215:30167
    frontend:
      theme: tkg
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    expiry:
      signingKeys: "10m"
      idTokens: "5m"
    logger:
      level: "debug"
      format: "json"

    staticClients:
    - id: adint1
      redirectURIs:
      - 'https://10.193.38.231:30166/callback'
      name: 'adint1'
      # echo -n '<clientSecret>'
      secret: ycSVXbs2MifBEzGTrzJvRYwZXUNS8SVkv8/r7xXChcU=

    connectors:
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.
        host: caasadc1.caas.pez.pivotal.io:3269

        # Following field is required if the LDAP host is not using TLS (port 389).
        # Because this option inherently leaks passwords to anyone on the same network
        # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
        #
        # insecureNoSSL: true

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        insecureSkipVerify: false

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        # startTLS: true

        # Path to a trusted root certificate file. Default: use the host's root CA.
        #rootCA: /etc/dex/ldap.ca

        # A raw certificate file can also be provided inline.
        rootCAData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3VENDQXFtZ0F3SUJBZ0lRR3FkMGs3NFZScU5LU3NtUmYvQ1hCakFOQmdrcWhraUc5dzBCQVFzRkFEQnoKTVJJd0VBWUtDWkltaVpQeUxHUUJHUllDYVc4eEZ6QVZCZ29Ka2lhSmsvSXNaQUVaRmdkd2FYWnZkR0ZzTVJNdwpFUVlLQ1pJbWlaUHlMR1FCR1JZRGNHVjZNUlF3RWdZS0NaSW1pWlB5TEdRQkdSWUVZMkZoY3pFWk1CY0dBMVVFCkF4TVFZMkZoY3kxRFFVRlRRVVJETVMxRFFUQWVGdzB5TURBME1qTXhPVEl4TkROYUZ3MHpNREEwTWpNeE9UTXgKTkRKYU1ITXhFakFRQmdvSmtpYUprL0lzWkFFWkZnSnBiekVYTUJVR0NnbVNKb21UOGl4a0FSa1dCM0JwZG05MApZV3d4RXpBUkJnb0praWFKay9Jc1pBRVpGZ053WlhveEZEQVNCZ29Ka2lhSmsvSXNaQUVaRmdSallXRnpNUmt3CkZ3WURWUVFERXhCallXRnpMVU5CUVZOQlJFTXhMVU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdmRUb3NoRW9USjJrVjI3dEY0bnlBbllvUk53QW5uZGRWQ0dHbDJ4eVozN1diM1BJVFZtUwowd3FlcVdxYlhzRDBKRnBFL0gxVnFBOXlDemFUa2tSbzRmNUlOL1NZbGF0ZFpFeGtJYW1YaXRrY2xoMVRqZkprCkVCRzB2S3h4dmwyRkFCQ2ZuSy81QS9Fdi9NWm45NGRPZytqWHFZSVNwMHpNUG5KRmN6Y2EzSVVJRnVXY2dKRmcKdlZQUHZoMVA4YUFGamZPRkpZQTc0M0wyNEFkcXpGcWtDdlJMaWtwR3NPSnVmanlMN0p1dUFBSzRrS2VWWDFkUQpFalJ1QnRTYTgzekF0MGErMHozcHp1K2hBRXN1eUJkUVhmVDd3bTFVRVBJNWlSa1ZtRERFTGRER3pNMWwxTzNjClFtUis2Z3A2ZWY0cWt5THN6dVVub2U2RDRnUzVPRFd6UndJREFRQUJvMUV3VHpBTEJnTlZIUThFQkFNQ0FZWXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVeWRPcjBaZTRuQ1BxNDB1ZTkrSU01WDA0UDg0dwpFQVlKS3dZQkJBR0NOeFVCQkFNQ0FRQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRFNtZmVDOTNaemphNkl6CmRCRVdvYTRVZ1hFTUR3WVc3UVhVOXQ5ajBHZzc3cTQrQzFNZUdEbW4xbFpyeXliRzVFQzl4LzBQR0pqUlMxTW8KR3o2T0M3S2hIQVFOdVlnNnVaRS90d1NSNWw0b3pHekd0bUVqSG9HMCtxbmdCUXRyeGpZTi8xai9ZTjJOcSsyWQplaTY0WWRkdHNFdUhnQWxNM2RVb0tMSjdCdW9CL2RkbDIyM3ZtNGY0aFpscjB6TmpTMXcwUzV6OHc5bTVROTBDCnBTTyttOE9CMy92V3JTamg2eS84eDhWZ1hJOWZ4TGswaGRseWt5eXB0Rk5JOGZXaC95WldKMmxhanB6RXpRb1QKd3psMVR3MzJLd1Z1clN0RUhrekgvN0lxMXMyRDcxOGxIaTRscWJYSjFqNlRFK00xZGF5RGxrZEp1SE13WEgzZgoyOHFxNVRnPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==



        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: CN=ad bind,OU=Service Accounts,DC=caas,DC=pez,DC=pivotal,DC=io
        bindPW: Pivotal123

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        usernamePrompt: LDAP Username (user@ad-domain.tld)

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          baseDN: OU=User Accounts,DC=caas,DC=pez,DC=pivotal,DC=io
          filter: "(objectClass=person)"
          username: userPrincipalName
          idAttr: DN
          emailAttr: userPrincipalName
          nameAttr: cn

        # Group search queries for groups given a user entry.
        groupSearch:
          baseDN: OU=Security Groups,DC=caas,DC=pez,DC=pivotal,DC=io
          filter: "(objectClass=group)"
          userAttr: DN
          groupAttr: member
          nameAttr: cn

    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]
    storage:
      type: kubernetes
      config:
        inCluster: true

    enablePasswordDB: false
