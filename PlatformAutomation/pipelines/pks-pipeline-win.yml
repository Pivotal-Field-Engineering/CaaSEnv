
interpolate-creds: &interpolate-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/foundation/((foundation))'
    INTERPOLATION_PATHS: "((foundation))/env ((foundation))/vars"
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-creds

s3_credentials_binaries: &s3_credentials_binaries
  access_key_id: ((s3.access_key_id))
  secret_access_key: ((s3.secret_access_key))
  endpoint: ((s3.endpoint))
  bucket: ((s3.buckets_pivnet_products))
  region_name: ((s3.region_name))
  skip_ssl_verification: true



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:


- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: platform-automation-image-(.*).tgz

- name: custom-task-image
  type: docker-image
  source:
    repository: ((registry.endpoint))/((registry.repo))
    tag: latest
    username: ((registry.username))
    password: ((registry.password))
    insecure-registries: [((registry.endpoint))]
    ca_certs:
      - domain: ((registry.endpoint))
        cert: ((registry.ca_cert))

- name: opsman-image
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[ops-manager,(.*)\].*.ova #regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova

- name: pks-stemcell
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: pks-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: pks-windows-stemcell
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: pks-windows-stemcell/\[stemcells-windows-server,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz
    regexp: pks-windows-stemcell/\[stemcells-windows-server-internal,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: pks-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal

- name: harbor-stemcell
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: harbor-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: harbor-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[harbor-container-registry,(.*)\]harbor-container-registry-(.*).pivotal

- name: installation
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_backup_bucket)) #Different Bucket
    region_name: ((s3.region_name))
    skip_ssl_verification: true
    regexp: ((foundation))/installation-(.*).zip

- name: config-backup
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_backup_bucket)) #Different Bucket
    region_name: ((s3.region_name))
    skip_ssl_verification: true
    regexp: ((foundation))/(.*).yml

- name: configuration
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["((foundation))"] #Adjusted for subfolder in Repo

- name: state
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))

- name: custom-tasks
  type: git
  source:
    uri: ((PlatformAutomation_github_repo))
    branch: ((PlatformAutomation_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["tasks"]

# triggers used to have jobs do something in a timely manner
- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

groups:
- name: deploy
  jobs:
  - install-opsman
  - pks
  - harbor
  - apply-changes
- name: post-deploy
  jobs:
  - add-pks-admin
- name: save-state
  jobs:
  - export-installation
  - staged-director-config-backup
  - staged-config-pks-backup
  - staged-config-harbor-backup
- name: teardown
  jobs:
  - destroy-installation


jobs:

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: opsman-image
    - get: configuration
    - get: state
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      trigger: true
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: state
      config: configuration
      vars: interpolated-creds
      image: opsman-image
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml #prepends config/
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml vars/((foundation))/vars/opsman-vars.yml

    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: state
            file-source: generated-state
          output_mapping:
            repository-commit: state-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((github_author_email))
            GIT_AUTHOR_NAME: "Platform Automation"
            COMMIT_MESSAGE: 'Update state file'
        - put: state
          params:
            repository: state-commit
            merge: true

  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-creds
      config: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/auth.yml
  # - task: configure-ldap-authentication
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/configure-ldap-authentication.yml
  #   attempts: 10
  #   input_mapping:
  #     env: interpolated-creds
  #     config: interpolated-creds
  #   params:
  #     ENV_FILE: ((foundation))/env/env.yml
  #     AUTH_CONFIG_FILE: ((foundation))/vars/auth-ldap.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      VARS_FILES: vars/((foundation))/vars/director-defaults.yml vars/((foundation))/vars/director-vars.yml

  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: pks
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: configuration
      trigger: true
    - get: pks-product
    - get: pks-stemcell
    - get: pks-windows-stemcell
    - get: custom-tasks
    - get: custom-task-image
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [install-opsman]
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: upload-product-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks-product
      config: configuration
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks-product
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-pks-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-creds
      stemcell: pks-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-pks-windows-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-creds
      stemcell: pks-windows-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: get_nsx_vars
    image: custom-task-image
    file: custom-tasks/tasks/create-pks-nsx-vars.yml
    input_mapping:
      config: configuration
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml
      PKS_VARS_FILE: vars/((foundation))/vars/pks-vars.yml
      NSX_VARS_FILE:  vars/((foundation))/vars/pks-nsx-vars.yml
    output_mapping:
      vars: interpolated-creds

  - task: configure-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/pks.yml
      VARS_FILES: |
        vars/((foundation))/vars/pks-defaults.yml
        vars/((foundation))/vars/pks-vars.yml
        vars/((foundation))/vars/pks-nsx-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

  - task: assign-pks-stemcells
    image: platform-automation-image
    file: platform-automation-tasks/tasks/assign-multi-stemcell.yml
    input_mapping:
      config: configuration
      env: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/pks-stemcells.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: harbor
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: harbor-product
    - get: harbor-stemcell
    - get: configuration
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [install-opsman]
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: upload-product-harbor
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: harbor-product
      config: configuration
      download-config: configuration
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-harbor
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: harbor-product
      config: configuration
      download-config: configuration
      env: interpolated-creds
      secrets: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-harbor-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-creds
      stemcell: harbor-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-harbor
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/harbor.yml
      VARS_FILES: |
        vars/((foundation))/vars/harbor-defaults.yml
        vars/((foundation))/vars/harbor-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: apply-changes
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ pks, harbor]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: configuration
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: export-installation
  build_log_retention:
    builds: 2
  serial: true
  plan:
    - aggregate:
        - get: one-time-trigger
        - get: daily-trigger
          trigger: true
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip

- name: staged-director-config-backup
  build_log_retention:
    builds: 2
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-image
    params: {unpack: true}
  - get: configuration
  - task: interpolate-creds
    <<: *interpolate-creds
  - task: staged-director-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-pks-backup
  build_log_retention:
    builds: 2
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-image
    params: {unpack: true}
  - get: configuration
  - task: interpolate-creds
    <<: *interpolate-creds
  - task: staged-pas-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: pivotal-container-service
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-harbor-backup
  build_log_retention:
    builds: 2
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-image
    params: {unpack: true}
  - get: configuration
  - task: interpolate-creds
    <<: *interpolate-creds
  - task: staged-pas-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: harbor-container-registry
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: add-pks-admin
  serial: true
  serial_groups: [ post-deploy ]
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: configuration
    - get: custom-tasks
    - get: custom-task-image
    - get: platform-automation-image
      passed: [apply-changes]
      trigger: true
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: config-pks-admin-user
    image: custom-task-image
    file: custom-tasks/tasks/create_pks_admin_user.yml
    input_mapping:
      config: interpolated-creds #Note this is different
      env: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/vars/pks-vars.yml  #Note this is different
      ENV_FILE: ((foundation))/env/env.yml

- name: destroy-installation
  serial: true
  serial_groups: [ teardown ]
  build_log_retention:
    builds: 2
  plan:
  - aggregate:
    - get: configuration
    - get: state
    - get: platform-automation-image
      passed: [apply-changes]
      trigger: false
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true

  - task: interpolate-creds
    <<: *interpolate-creds

  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: delete-opsman-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: state
      config: configuration
      vars: interpolated-creds
      env: interpolated-creds
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml
        vars/((foundation))/vars/opsman-vars.yml
